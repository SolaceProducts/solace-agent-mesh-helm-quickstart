apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "sam.fullname" . }}
  labels:
    {{- include "sam.labels" . | nindent 4 }}
  {{- include "sam.annotations" . | nindent 2 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "sam.selectorLabels" . | nindent 6 }}
  strategy:
    {{- if eq .Values.rollout.strategy "RollingUpdate" }}
    {{- with .Values.rollout.rollingUpdate }}
    rollingUpdate:
      {{- toYaml . | nindent 6 }}
    {{- end }}
    {{- end }}
    type: {{ .Values.rollout.strategy }}
  template:
    metadata:
      annotations:
        {{- include "sam.podAnnotations" . | nindent 8 }}
        checksum/config: {{ include (print $.Template.BasePath "/agent-config.yaml") . | sha256sum }}
        checksum/env: {{ include (print $.Template.BasePath "/secret-env-vars.yaml") . | sha256sum }}
      labels:
        {{- include "sam.selectorLabels" . | nindent 8 }}
        {{- include "sam.podLabels" . | nindent 8 }}
    spec:
      serviceAccountName: {{ .Values.serviceAccount.name }}
      {{- if .Values.podSecurityContext }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      {{- end }}
      initContainers:
        - name: db-init
          image: "{{- if .Values.global.imageRegistry }}{{ .Values.global.imageRegistry }}/{{ end }}postgres:18.0"
          envFrom:
            - secretRef:
                name: {{ include "sam.postgresql.secretName" . }}
            - secretRef:
                name: {{ include "sam.fullname" . }}-init-credentials
          command:
            - "sh"
            - "-c"
            - |
              until pg_isready; do
                echo "Waiting for postgres..."
                sleep 5
              done
              psql -c "CREATE USER \"$DATABASE_USER\" WITH PASSWORD '$DATABASE_PASSWORD';" || true
              psql -c "CREATE DATABASE \"$DATABASE_NAME\" OWNER \"$DATABASE_USER\";" || true
      containers:
        - name: sam
          envFrom:
            - secretRef:
                name: {{ include "sam.fullname" . }}-persistence
            - secretRef:
                name: {{ include "sam.fullname" . }}-env-vars
          command: ["solace-agent-mesh", "run", "--system-env", "/app/config/agent.yaml"]
          {{- if .Values.securityContext }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
            runAsUser: 999
            runAsGroup: 999
          {{- end }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- if .Values.resources }}
          resources:
            {{- toYaml .Values.resources.sam | nindent 12 }}
          {{- end }}
          ## If the application is consistently unavailable for 20 seconds, it is considered unhealthy and traffic is not sent to the pod
          #readinessProbe:
          #  httpGet:
          #   path: /
          #    port: webui
          #    scheme: HTTPS
          #  initialDelaySeconds: 15 # Give the app time to start before probing
          #  successThreshold: 1
          #  failureThreshold: 4
          #  periodSeconds: 5
          ## If the application is consistently down for 20 seconds it is restarted
          #livenessProbe:
          #  httpGet:
          #    path: /
          #    port: webui
          #    scheme: HTTPS
          #  initialDelaySeconds: 30 # Give the app time to start before probing
          #  successThreshold: 1
          #  failureThreshold: 4
          #  periodSeconds: 5
          volumeMounts:
            - name: shared-storage
              mountPath: /tmp/solace-agent-mesh
            - name: config-volume
              mountPath: /app/config/agent.yaml
              subPath: agent.yaml
              readOnly: true
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
        - name: shared-storage
          emptyDir: {}
        - name: config-volume
          configMap:
            name: {{ include "sam.fullname" . }}-config
