apiVersion: v1
kind: Secret
metadata:
  name: {{ include "sam.fullname" $ }}-environment
  labels:
    {{- include "sam.labels" $ | nindent 4 }}
type: Opaque
data:
  # Namespace configuration
  NAMESPACE: {{ .Release.Namespace | b64enc | quote }}

  # Solace Broker configuration
  SOLACE_BROKER_URL: {{ .Values.broker.url | b64enc | quote }}
  SOLACE_BROKER_USERNAME: {{ .Values.broker.clientUsername | b64enc | quote }}
  SOLACE_BROKER_PASSWORD: {{ .Values.broker.password | b64enc | quote }}
  SOLACE_BROKER_VPN: {{ .Values.broker.vpn | b64enc | quote }}
  SOLACE_DEV_MODE: {{ "false" | b64enc | quote }}
  USE_TEMPORARY_QUEUES: {{ "false" | b64enc | quote }}

  # LLM Service configuration
  LLM_SERVICE_PLANNING_MODEL_NAME: {{ .Values.llmService.planningModel | b64enc | quote }}
  LLM_SERVICE_GENERAL_MODEL_NAME: {{ .Values.llmService.generalModel | b64enc | quote }}
  LLM_REPORT_MODEL_NAME: {{ .Values.llmService.reportModel | b64enc | quote }}
  LLM_SERVICE_ENDPOINT: {{ .Values.llmService.llmServiceEndpoint | b64enc | quote }}
  LLM_SERVICE_API_KEY: {{ .Values.llmService.llmServiceApiKey | b64enc | quote }}

  # Image models (defaults to LLM service)
  IMAGE_MODEL_NAME: {{ .Values.llmService.imageModel | b64enc | quote }}
  IMAGE_DESCRIPTION_MODEL_NAME: {{ .Values.llmService.planningModel | b64enc | quote }}
  IMAGE_SERVICE_ENDPOINT: {{ .Values.llmService.llmServiceEndpoint | b64enc | quote }}
  IMAGE_SERVICE_API_KEY: {{ .Values.llmService.llmServiceApiKey | b64enc | quote }}

  # Audio transcription (defaults to LLM service)
  AUDIO_TRANSCRIPTION_MODEL_NAME: {{ .Values.llmService.transcriptionModel | b64enc | quote }}
  AUDIO_TRANSCRIPTION_API_BASE: {{ .Values.llmService.llmServiceEndpoint | b64enc | quote }}
  AUDIO_TRANSCRIPTION_API_KEY: {{ .Values.llmService.llmServiceApiKey | b64enc | quote }}

  # WebUI Gateway configuration
  WEBUI_GATEWAY_ID: {{ printf "%s-gateway" (include "sam.fullname" $) | b64enc | quote }}
  FASTAPI_HOST: {{ "0.0.0.0" | b64enc | quote }}
  FASTAPI_PORT: {{ "8000" | b64enc | quote }}
  FASTAPI_HTTPS_PORT: {{ "8443" | b64enc | quote }}
  SESSION_SECRET_KEY: {{ .Values.sam.sessionSecretKey | b64enc | quote }}

  # Frontend configuration
  FRONTEND_WELCOME_MESSAGE: {{ "How can I assist you today?" | b64enc | quote }}
  FRONTEND_BOT_NAME: {{ "Solace Agent Mesh" | b64enc | quote }}
  FRONTEND_COLLECT_FEEDBACK: {{ "false" | b64enc | quote }}

  # Gateway artifact handling
  ENABLE_EMBED_RESOLUTION: {{ "true" | b64enc | quote }}
  GATEWAY_ARTIFACT_LIMIT_BYTES: {{ "10000000" | b64enc | quote }}

  # TLS/SSL configuration
  {{- if .Values.ingressService.tls.enabled }}
  SSL_CERTFILE: {{ "/app/certs/tls.crt" | b64enc | quote }}
  SSL_KEYFILE: {{ "/app/certs/tls.key" | b64enc | quote }}
  SSL_KEYFILE_PASSWORD: {{ .Values.ingressService.tls.passphrase | b64enc | quote }}
  {{- else }}
  SSL_CERTFILE: {{ "" | b64enc | quote }}
  SSL_KEYFILE: {{ "" | b64enc | quote }}
  SSL_KEYFILE_PASSWORD: {{ "" | b64enc | quote }}
  {{- end }}

  {{- if .Values.sam.enterprise }}
  # External authentication (Enterprise only)
  # OAuth2 configuration (Enterprise only)
  {{- if and .Values.sam.oauthProvider.oidc .Values.sam.oauthProvider.oidc.issuer }}
  OAUTH2_ENABLED: {{ "true" | b64enc | quote }}
  FRONTEND_USE_AUTHORIZATION: {{ "true" | b64enc | quote }}
  {{- else }}
  OAUTH2_ENABLED: {{ "false" | b64enc | quote }}
  FRONTEND_USE_AUTHORIZATION: {{ "false" | b64enc | quote }}
  {{- end }}
  {{- $authScheme := ternary "https" "http" .Values.ingressService.tls.enabled }}
  {{- $authPort := "5050" }}
  {{- $servicePort := "443" }}
  {{- $serviceDns := printf "%s.%s.svc.cluster.local" (include "sam.fullname" $) .Release.Namespace }}
  {{- $authHost := .Values.sam.dnsName | default $serviceDns }}
  {{- $webuiScheme := ternary "https" "http" .Values.ingressService.tls.enabled }}
  {{- $webuiPort := ternary "8443" "8000" .Values.ingressService.tls.enabled }}
  {{- $webuiHost := .Values.sam.dnsName | default $serviceDns }}
  WEBUI_FRONTEND_SERVER_URL : {{ printf "%s://%s:%s" $webuiScheme $webuiHost $servicePort | b64enc | quote }}
  WEBUI_FRONTEND_URL : {{ printf "%s://%s:%s" $webuiScheme $webuiHost $servicePort | b64enc | quote }}
  EXTERNAL_AUTH_CALLBACK: {{ printf "%s://%s:%s/api/v1/auth/callback" $webuiScheme $webuiHost $servicePort | b64enc | quote }}
  FRONTEND_REDIRECT_URL: {{ printf "%s://%s:%s" $webuiScheme $webuiHost $servicePort | b64enc | quote }}
  EXTERNAL_AUTH_SERVICE_URL: {{ printf "%s://%s:%s" $authScheme $authHost $authPort | b64enc | quote }}
  EXTERNAL_AUTH_HOST: {{ $authHost | b64enc | quote }}

  # OIDC configuration (Enterprise only)
  EXTERNAL_AUTH_PROVIDER: {{ "oidc" | b64enc | quote }}
  OIDC_ISSUER: {{ .Values.sam.oauthProvider.oidc.issuer | b64enc | quote }}
  OIDC_CLIENT_ID: {{ .Values.sam.oauthProvider.oidc.clientId | b64enc | quote }}
  OIDC_CLIENT_SECRET: {{ .Values.sam.oauthProvider.oidc.clientSecret | b64enc | quote }}
  OIDC_REDIRECT_URI: {{ printf "%s://%s:%s/api/v1/auth/callback" $webuiScheme $webuiHost $servicePort | b64enc | quote }}

  DEPLOY_COMMAND: {{ printf "echo '{{ configurationFile }}' > /tmp/agent-deploy-{{ id }}.yaml && helm install sam-agent-{{ id }} https://solaceproducts.github.io/solace-agent-mesh-helm-quickstart/sam-agent-1.0.3.tgz --set-json 'environmentVariables={{ values }}' --set agentId={{ id }} --set-file config.agentYaml=/tmp/agent-deploy-{{ id }}.yaml --set solaceBroker.url=${SOLACE_BROKER_URL} --set solaceBroker.username=${SOLACE_BROKER_USERNAME} --set solaceBroker.password=${SOLACE_BROKER_PASSWORD} --set solaceBroker.vpn=${SOLACE_BROKER_VPN} --set llmService.generalModelName=${LLM_SERVICE_GENERAL_MODEL_NAME} --set llmService.endpoint=${LLM_SERVICE_ENDPOINT} --set llmService.apiKey=${LLM_SERVICE_API_KEY} --set image.repository=%s --set image.tag=%s --set global.persistence.namespaceId=%s" .Values.samDeployment.image.repository .Values.samDeployment.image.tag .Values.global.persistence.namespaceId | b64enc | quote }}
  UPDATE_COMMAND: {{ printf "echo '{{ configurationFile }}' > /tmp/agent-update-{{ id }}.yaml && helm upgrade -i sam-agent-{{ id }} https://solaceproducts.github.io/solace-agent-mesh-helm-quickstart/sam-agent-1.0.3.tgz --set-json 'environmentVariables={{ values }}' --set agentId={{ id }} --set-file config.agentYaml=/tmp/agent-update-{{ id }}.yaml --set solaceBroker.url=${SOLACE_BROKER_URL} --set solaceBroker.username=${SOLACE_BROKER_USERNAME} --set solaceBroker.password=${SOLACE_BROKER_PASSWORD} --set solaceBroker.vpn=${SOLACE_BROKER_VPN} --set llmService.generalModelName=${LLM_SERVICE_GENERAL_MODEL_NAME} --set llmService.endpoint=${LLM_SERVICE_ENDPOINT} --set llmService.apiKey=${LLM_SERVICE_API_KEY} --set image.repository=%s --set image.tag=%s --set global.persistence.namespaceId=%s" .Values.samDeployment.image.repository .Values.samDeployment.image.tag .Values.global.persistence.namespaceId | b64enc | quote }}
  STATUS_COMMAND: {{ printf "helm status sam-agent-{{ id }} -o json" | b64enc | quote }}
  UNDEPLOY_COMMAND: {{ printf "helm delete sam-agent-{{ id }}" | b64enc | quote }}

  OAUTH2_DEV_MODE: {{ "false" | b64enc | quote }}
  {{- end }}

  # Custom environment variables from values.yaml
  {{- if .Values.environmentVariables }}
  {{- if kindIs "map" .Values.environmentVariables }}
  {{- range $key, $value := .Values.environmentVariables }}
  {{ $key }}: {{ $value | toString | b64enc | quote }}
  {{- end }}
  {{- else if kindIs "string" .Values.environmentVariables }}
  {{- $envVars := .Values.environmentVariables }}
  {{- range $line := splitList "\n" $envVars }}
  {{- if $line }}
  {{- $parts := splitn "=" 2 $line }}
  {{- if eq (len $parts) 2 }}
  {{ index $parts 0 | trim }}: {{ index $parts 1 | trim | b64enc | quote }}
  {{- end }}
  {{- end }}
  {{- end }}
  {{- end }}
  {{- end }}
