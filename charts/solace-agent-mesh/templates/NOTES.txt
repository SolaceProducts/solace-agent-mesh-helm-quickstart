SAM (Solace Agent Mesh) has been deployed successfully!

Chart Version: {{ .Chart.Version }}
Release Name: {{ .Release.Name }}
Namespace: {{ .Release.Namespace }}

================================================================================
ACCESSING SAM WEB UI
================================================================================

{{- if .Values.ingress.enabled }}

Your SAM instance is accessible via Ingress:

{{- $ingressHost := "" }}
{{- range .Values.ingress.hosts }}
  {{- if .host }}
    {{- $ingressHost = .host }}
  {{- end }}
{{- end }}
{{- $externalHost := $ingressHost | default .Values.sam.dnsName }}
{{- if .Values.ingress.annotations }}
  {{- if hasKey .Values.ingress.annotations "external-dns.alpha.kubernetes.io/hostname" }}
    {{- $externalHost = index .Values.ingress.annotations "external-dns.alpha.kubernetes.io/hostname" }}
  {{- end }}
{{- end }}
{{- $hasIngressTls := or (and .Values.ingress.tls (gt (len .Values.ingress.tls) 0)) (and .Values.ingress.annotations (hasKey .Values.ingress.annotations "alb.ingress.kubernetes.io/certificate-arn")) }}
{{- $scheme := ternary "https" "http" $hasIngressTls }}
{{- if $externalHost }}
  URL: {{ $scheme }}://{{ $externalHost }}
{{- else }}
  URL: <ALB DNS will be assigned - check with: kubectl get ingress {{ include "sam.fullname" . }} -n {{ .Release.Namespace }}>
{{- end }}

{{- if $hasIngressTls }}
TLS is enabled via Ingress/ALB certificate.
{{- else }}
NOTE: Configure TLS for production use via ingress.tls in values.yaml
{{- end }}

{{- else if eq .Values.service.type "LoadBalancer" }}

Your SAM instance is being exposed via LoadBalancer.

Get the external IP address:

  kubectl get svc {{ include "sam.fullname" . }} -n {{ .Release.Namespace }} -w

Once the EXTERNAL-IP is assigned, access SAM at:

{{- if .Values.service.tls.enabled }}
  Web UI:  https://<EXTERNAL-IP>
  Auth:    https://<EXTERNAL-IP>:5050
{{- else }}
  Web UI:  http://<EXTERNAL-IP>
  Auth:    http://<EXTERNAL-IP>:5050
{{- end }}

{{- else if eq .Values.service.type "NodePort" }}

Your SAM instance is exposed via NodePort.

Get the Node IP and assigned ports:

  NODE_IP=$(kubectl get nodes -o jsonpath='{.items[0].status.addresses[?(@.type=="ExternalIP")].address}' || \
            kubectl get nodes -o jsonpath='{.items[0].status.addresses[?(@.type=="InternalIP")].address}')

  NODE_PORT_HTTPS=$(kubectl get svc {{ include "sam.fullname" . }} -n {{ .Release.Namespace }} -o jsonpath='{.spec.ports[?(@.name=="webui-tls")].nodePort}')
  NODE_PORT_HTTP=$(kubectl get svc {{ include "sam.fullname" . }} -n {{ .Release.Namespace }} -o jsonpath='{.spec.ports[?(@.name=="webui")].nodePort}')
  NODE_PORT_AUTH=$(kubectl get svc {{ include "sam.fullname" . }} -n {{ .Release.Namespace }} -o jsonpath='{.spec.ports[?(@.name=="auth")].nodePort}')

Access SAM at:

{{- if .Values.service.tls.enabled }}
  Web UI:  https://$NODE_IP:$NODE_PORT_HTTPS
  Auth:    https://$NODE_IP:$NODE_PORT_AUTH
{{- else }}
  Web UI:  http://$NODE_IP:$NODE_PORT_HTTP
  Auth:    http://$NODE_IP:$NODE_PORT_AUTH
{{- end }}

{{- else }}

Your SAM instance is using ClusterIP (internal only).

To access SAM locally, use port-forward:

{{- if .Values.service.tls.enabled }}
  kubectl port-forward -n {{ .Release.Namespace }} svc/{{ include "sam.fullname" . }} 8443:443

  Then access SAM at: https://localhost:8443
{{- else }}
  kubectl port-forward -n {{ .Release.Namespace }} svc/{{ include "sam.fullname" . }} 8080:80

  Then access SAM at: http://localhost:8080
{{- end }}

For production use, consider enabling Ingress:
  helm upgrade {{ .Release.Name }} . --set ingress.enabled=true --set ingress.hosts[0].host=sam.example.com

{{- end }}

================================================================================
CONFIGURATION
================================================================================

Service Type: {{ .Values.service.type }}
{{- if .Values.service.tls.enabled }}
Service TLS: Yes
{{- else }}
Service TLS: No
{{- end }}
{{- if .Values.sam.enterprise }}
Mode: Enterprise
{{- if and .Values.sam.oauthProvider.oidc.issuer (ne .Values.sam.oauthProvider.oidc.issuer "") }}
OAuth2/OIDC: Enabled
{{- else }}
OAuth2/OIDC: Disabled
{{- end }}
{{- else }}
Mode: Community
{{- end }}

================================================================================
MONITORING
================================================================================

Check pod status:
  kubectl get pods -n {{ .Release.Namespace }} -l app.kubernetes.io/instance={{ .Release.Name }}

View logs:
  kubectl logs -n {{ .Release.Namespace }} -l app.kubernetes.io/instance={{ .Release.Name }} -f

================================================================================
DOCUMENTATION
================================================================================

For more information, visit:
  https://github.com/SolaceProducts/solace-agent-mesh-helm-quickstart

For SAM documentation:
  https://docs.solace.com/Agentic-AI/agent-mesh.htm
