apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "sam.fullname" . }}-core
  labels:
    {{- include "sam.labels" . | nindent 4 }}
    app.kubernetes.io/component: core
  {{- include "sam.annotations" . | nindent 2 }}
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "sam.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: core
  strategy:
    {{- if eq .Values.samDeployment.rollout.strategy "RollingUpdate" }}
    {{- with .Values.samDeployment.rollout.rollingUpdate }}
    rollingUpdate:
      {{- toYaml . | nindent 6 }}
    {{- end }}
    {{- end }}
    type: {{ .Values.samDeployment.rollout.strategy }}
  template:
    metadata:
      annotations:
        {{- include "sam.podAnnotations" . | nindent 8 }}
        checksum/config: {{ include (print $.Template.BasePath "/configmap_sam_config_files.yaml") . | sha256sum }}
        checksum/env: {{ include (print $.Template.BasePath "/secret_sam_env.yaml") . | sha256sum }}
      labels:
        {{- include "sam.selectorLabels" . | nindent 8 }}
        {{- include "sam.podLabels" . | nindent 8 }}
        app.kubernetes.io/component: core
    spec:
      serviceAccountName: {{ .Values.samDeployment.serviceAccount.name }}
      {{- if .Values.samDeployment.podSecurityContext }}
      securityContext:
        {{- toYaml .Values.samDeployment.podSecurityContext | nindent 8 }}
      {{- end }}
      initContainers:
      {{-  if .Values.global.persistence.enabled }}
        - name: s3-init
          image: "{{- if .Values.global.imageRegistry }}{{ .Values.global.imageRegistry }}/{{ end }}chrislusf/seaweedfs:3.97"
          envFrom:
            - secretRef:
                name: {{ include "seaweedfs.secretName" (index .Subcharts "persistence-layer") }}
            - secretRef:
                name: {{ include "sam.fullname" . }}-init-credentials
          command:
            - sh
            - -c
            - |
              echo "Waiting for SeaweedFS master to be ready..."
              until wget --timeout=3 --tries=1 --spider -qO- $SEAWEEDFS_MASTER_ENDPOINT_STATUS_URL >/dev/null; do
                echo "Master not ready yet..."
                sleep 5
              done

              echo -e "SeaweedFS master is ready.\n"

              echo "Waiting for SeaweedFS S3 API to be ready..."
              until wget --timeout=3 --tries=1 --spider -qO- $SEAWEEDFS_S3_ENDPOINT_STATUS_URL >/dev/null; do
                echo "S3 API not ready yet..."
                sleep 5
              done

              echo -e "SeaweedFS S3 API is ready.\n"

              echo "Configuring SeaweedFS S3 credentials and bucket..."
              echo "s3.bucket.create -name=$S3_BUCKET_NAME" | weed shell -master=$SEAWEEDFS_MASTER_ENDPOINT || exit 1
              echo "s3.configure -apply -access_key=$S3_ACCESS_KEY -secret_key=$S3_SECRET_KEY -user=$S3_ACCESS_KEY -actions=Read,Write,List -buckets=$S3_BUCKET_NAME" | weed shell -master=$SEAWEEDFS_MASTER_ENDPOINT > /dev/null || exit 1

              echo "SeaweedFS S3 setup completed successfully!"
      {{- end }}
        - name: db-init
          image: "{{- if .Values.global.imageRegistry }}{{ .Values.global.imageRegistry }}/{{ end }}postgres:18.0"
          envFrom:
          {{ if .Values.global.persistence.enabled }}
            - secretRef:
                name: {{ include "postgresql.secretName" (index .Subcharts "persistence-layer") }}
          {{- else }}
            - secretRef:
                name: {{ include "sam.fullname" . }}-postgresql
          {{- end }}
            - secretRef:
                name: {{ include "sam.fullname" . }}-init-credentials
          command:
            - "sh"
            - "-c"
            - |
              until pg_isready; do
                echo "Waiting for postgres..."
                sleep 5
              done
              psql -c "CREATE USER \"$ORCHESTRATOR_DATABASE_USER\" WITH PASSWORD '$ORCHESTRATOR_DATABASE_PASSWORD';" || true
              psql -c "CREATE DATABASE \"$ORCHESTRATOR_DATABASE_NAME\" OWNER \"$ORCHESTRATOR_DATABASE_USER\";" || true
              psql -c "CREATE USER \"$WEB_UI_GATEWAY_DATABASE_USER\" WITH PASSWORD '$WEB_UI_GATEWAY_DATABASE_PASSWORD';" || true
              psql -c "CREATE DATABASE \"$WEB_UI_GATEWAY_DATABASE_NAME\" OWNER \"$WEB_UI_GATEWAY_DATABASE_USER\";" || true
              psql -c "CREATE USER \"$PLATFORM_DATABASE_USER\" WITH PASSWORD '$PLATFORM_DATABASE_PASSWORD';" || true
              psql -c "CREATE DATABASE \"$PLATFORM_DATABASE_NAME\" OWNER \"$PLATFORM_DATABASE_USER\";" || true
      containers:
        - name: sam-core
          ports:
            - name: orchestrator
              containerPort: 5002
            - name: webui-tls
              containerPort: 8443
            - name: webui
              containerPort: 8000
            - name: auth
              containerPort: 5050
          envFrom:
            - secretRef:
                name: {{ include "sam.fullname" . }}-environment
            - secretRef:
                name: {{ include "sam.fullname" . }}-persistence
          command:
            - solace-agent-mesh
            - run
            - --system-env
            - /app/config/a2a_orchestrator.yaml
            - /app/config/webui_backend.yaml
            {{- if .Values.sam.enterprise }}
            - /app/config/enterprise_config.yaml
            - /app/config/auth/oauth2_server.yaml
            {{- end }}
          {{- if .Values.samDeployment.securityContext }}
          securityContext:
            {{- toYaml .Values.samDeployment.securityContext | nindent 12 }}
            runAsUser: 999
            runAsGroup: 999
          {{- end }}
          image: "{{ .Values.samDeployment.image.repository }}:{{ .Values.samDeployment.image.tag }}"
          imagePullPolicy: {{ .Values.samDeployment.image.pullPolicy }}
          {{- if .Values.samDeployment.resources }}
          resources:
            {{- toYaml .Values.samDeployment.resources.sam | nindent 12 }}
          {{- end }}
          # If the application is consistently unavailable for 20 seconds, it is considered unhealthy and traffic is not sent to the pod
          readinessProbe:
            httpGet:
              path: /
              {{- if .Values.service.tls.enabled }}
              port: webui-tls
              scheme: HTTPS
              {{- else }}
              port: webui
              scheme: HTTP
              {{- end }}
            initialDelaySeconds: 30 # Give the app time to start before probing
            successThreshold: 1
            failureThreshold: 10
            periodSeconds: 10
          # If the application is consistently down for 20 seconds it is restarted
          livenessProbe:
            httpGet:
              path: /
              {{- if .Values.service.tls.enabled }}
              port: webui-tls
              scheme: HTTPS
              {{- else }}
              port: webui
              scheme: HTTP
              {{- end }}
            initialDelaySeconds: 30 # Give the app time to start before probing
            successThreshold: 1
            failureThreshold: 10
            periodSeconds: 10
          volumeMounts:
            - name: shared-storage
              mountPath: /tmp/solace-agent-mesh
            - name: config-volume
              mountPath: /app/config
              readOnly: true
            - name: tls-certs
              mountPath: /app/certs
              readOnly: true
      {{- with .Values.samDeployment.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.samDeployment.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
        - name: shared-storage
          emptyDir: {}
        - name: tls-certs
          secret:
            secretName: {{ include "sam.fullname" $ }}-tls
            optional: true
        - name: config-volume
          projected:
            sources:
              - configMap:
                  name: {{ include "sam.fullname" $ }}-shared-config
              {{- if .Values.sam.enterprise }}
              - configMap:
                  name: {{ include "sam.fullname" $ }}-oauth2-server-config
                  items:
                    - key: oauth2_server.yaml
                      path: auth/oauth2_server.yaml
              - configMap:
                  name: {{ include "sam.fullname" $ }}-oauth2-config
                  items:
                    - key: oauth2_config.yaml
                      path: auth/oauth2_config.yaml
              - configMap:
                  name: {{ include "sam.fullname" $ }}-enterprise-config
              - configMap:
                  name: {{ include "sam.fullname" $ }}-role-definitions
                  items:
                    - key: role-to-scope-definitions.yaml
                      path: auth/role-to-scope-definitions.yaml
              - configMap:
                  name: {{ include "sam.fullname" $ }}-user-roles
                  items:
                    - key: user-to-role-assignments.yaml
                      path: auth/user-to-role-assignments.yaml
              {{- end }}
              - configMap:
                  name: {{ include "sam.fullname" $ }}-orchestrator-config
              - configMap:
                  name: {{ include "sam.fullname" $ }}-webui-config
